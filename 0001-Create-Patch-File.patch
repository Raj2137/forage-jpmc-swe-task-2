From 4269bc2a0effdd841e7e773cc11c1ff4b4455f86 Mon Sep 17 00:00:00 2001
From: Raj Kumar Rana <rajkumarrana044@gmail.com>
Date: Sun, 30 Jul 2023 10:16:12 +0530
Subject: [PATCH] Create Patch File

---
 package-lock.json |  2 +-
 package.json      |  2 +-
 src/App.tsx       | 16 +++++++++++++++-
 src/Graph.tsx     | 14 +++++++++++---
 4 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 21b4315..f5728d2 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -20,7 +20,7 @@
         "puppeteer": "^1.19.0",
         "react": "^16.9.0",
         "react-dom": "^16.9.0",
-        "react-scripts": "2.1.3"
+        "react-scripts": "^2.1.3"
       },
       "devDependencies": {
         "awesome-typescript-loader": "^5.2.1",
diff --git a/package.json b/package.json
index ca234e9..5cf500d 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "puppeteer": "^1.19.0",
     "react": "^16.9.0",
     "react-dom": "^16.9.0",
-    "react-scripts": "2.1.3"
+    "react-scripts": "^2.1.3"
   },
   "scripts": {
     "start": "react-scripts --openssl-legacy-provider start",
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7d223b9 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
   }
+}
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x=0;
+    const interval= setInterval(()=>{
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true, 
+    });
     });
+    x++;
+    if (x>1000){
+        clearInterval(interval);
+    }
+    },100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..15a1687 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,16 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute('view', 'y_line')
+    elem.setAttribute('column-pivots', '["stock"]')
+    elem.setAttribute('row-pivots', '["timestamp"]')
+    elem.setAttribute('columns', '["top_ask_price"]')
+    elem.setAttribute('aggregates', 
+                      `{"stock":"distinct count",
+                      "top_ask_price": "avg",
+                      "top_bid_price": "avg",
+                      "timestamp":"distinct count"}`);
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
-- 
2.39.1.windows.1

